import { NextRequest, NextResponse } from 'next/server';
import { sbAdmin } from '@/lib/supabase-admin';
import { tgAnswerCb, tgEditText, formatOrder, kbTaken, tgSend, kbDM, kbRequestPhone } from '@/lib/telegram';

export const runtime = 'nodejs';

export async function POST(req: NextRequest) {
  // –ü—Ä–æ—Å—Ç–µ–π—à–∞—è –∑–∞—â–∏—Ç–∞ –≤–µ–±—Ö—É–∫–∞ query-–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
  const secret = req.nextUrl.searchParams.get('secret');
  if (!process.env.TG_WEBHOOK_SECRET || secret !== process.env.TG_WEBHOOK_SECRET) {
    return NextResponse.json({ ok: false }, { status: 401 });
  }

  const update = await req.json().catch(() => ({}));

  try {
    // 1) /bind_drivers_channel ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ò–ó —Å–∞–º–æ–≥–æ –∫–∞–Ω–∞–ª–∞
    if (update.message?.text?.startsWith?.('/bind_drivers_channel')) {
      const chat = update.message.chat;
      if (chat?.type !== 'channel') {
        return NextResponse.json({ ok: true }); // –∏–≥–Ω–æ—Ä
      }
      await sbAdmin.from('bot_settings')
        .upsert({ key: 'drivers_channel_id', value: String(chat.id) }, { onConflict: 'key' });
      await tgSend(chat.id, '‚úÖ –ö–∞–Ω–∞–ª –ø—Ä–∏–≤—è–∑–∞–Ω. –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –±—É–¥—É—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å—Å—è –∑–¥–µ—Å—å.');
      return NextResponse.json({ ok: true });
    }

    // –∫–æ—Ä–æ—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞
    if (update.message?.text?.startsWith?.('/help')) {
      await tgSend(update.message.chat.id, '–ö–æ–º–∞–Ω–¥—ã:\n/start ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–º–µ—Ä–∞\n/bind_drivers_channel ‚Äî –ø—Ä–∏–≤—è–∑–∞—Ç—å –∫–∞–Ω–∞–ª (–≤ –∫–∞–Ω–∞–ª–µ).');
      return NextResponse.json({ ok: true });
    }

    // 2) –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º
    if (update.message?.contact) {
      const u = update.message.from;
      const c = update.message.contact;
      if (u && c && c.user_id === u.id) {
        await sbAdmin.from('tg_executors').upsert({
          tg_id: u.id,
          username: u.username ?? null,
          first_name: u.first_name ?? null,
          last_name: u.last_name ?? null,
          phone: c.phone_number,
        });
        await tgSend(u.id, '‚úÖ –ù–æ–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –ñ–¥–∏—Ç–µ –∑–∞–∫–∞–∑—ã.', { remove_keyboard: true });
      }
      return NextResponse.json({ ok: true });
    }

    // 3) /start ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏ –ø—Ä–æ—Å–∏–º –Ω–æ–º–µ—Ä
    if (update.message?.text?.startsWith?.('/start')) {
      const u = update.message.from;
      if (u) {
        const { data: ex } = await sbAdmin
          .from('tg_executors')
          .upsert({
            tg_id: u.id,
            username: u.username ?? null,
            first_name: u.first_name ?? null,
            last_name: u.last_name ?? null,
          })
          .select('phone')
          .single();
        if (ex?.phone) {
          await tgSend(u.id, 'üëã –ì–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–∫–∞–∑—ã.\n–ñ–¥–∏—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª–µ –∏ –Ω–∞–∂–∏–º–∞–π—Ç–µ ¬´–í–∑—è—Ç—å¬ª.');
        } else {
          await tgSend(
            u.id,
            'üëã –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.',
            kbRequestPhone()
          );
        }
      }
      return NextResponse.json({ ok: true });
    }

    // 4) –ù–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
    if (update.callback_query) {
      const { id: cbId, data, message, from } = update.callback_query;
      if (!data || !message) {
        await tgAnswerCb(cbId);
        return NextResponse.json({ ok: true });
      }

      // accept:<orderId>  –∏–ª–∏  release:<orderId>
      const [action, idStr] = String(data).split(':');
      const orderId = Number(idStr);

      if (action === 'accept') {
        // –∏—â–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è, –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω
        const { data: exec } = await sbAdmin
          .from('tg_executors')
          .select('phone')
          .eq('tg_id', from.id)
          .maybeSingle();

        // –∞—Ç–æ–º–∞—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–Ω—è—Ç—å –∑–∞–∫–∞–∑
        const claimPayload: any = {
          status: 'CLAIMED',
          claimed_by_tg_id: from.id,
          claimed_by_tg_username: from.username ?? null,
          claimed_at: new Date().toISOString(),
        };
        if (exec?.phone) claimPayload.claimed_by_tg_phone = exec.phone;

        let { data: updated, error } = await sbAdmin
          .from('orders')
          .update(claimPayload)
          .eq('id', orderId)
          .is('claimed_by', null)
          .or('claimed_by_tg_id.is.null')
          .eq('status', 'NEW')
          .select('*')
          .single();

        if (error && error.message?.includes('claimed_by_tg_phone')) {
          // –∫–æ–ª–æ–Ω–∫–∞ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω–∞
          ({ data: updated, error } = await sbAdmin
            .from('orders')
            .update({
              status: 'CLAIMED',
              claimed_by_tg_id: from.id,
              claimed_by_tg_username: from.username ?? null,
              claimed_at: new Date().toISOString(),
            })
            .eq('id', orderId)
            .is('claimed_by', null)
            .or('claimed_by_tg_id.is.null')
            .eq('status', 'NEW')
            .select('*')
            .single());
        }

        if (error || !updated) {
          await tgAnswerCb(cbId, '–£–≤—ã, –∑–∞–∫–∞–∑ —É–∂–µ –∑–∞–Ω—è—Ç', true);
          return NextResponse.json({ ok: true });
        }

        // –ø—Ä–∞–≤–∏–º –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ
        await tgEditText(
          message.chat.id,
          message.message_id,
          `${formatOrder(updated)}\n\n<i>–ó–∞–Ω—è–ª @${from.username ?? from.id}</i>`,
          kbTaken(from.username)
        );

        // —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏ —à–ª—ë–º –õ–°
        await sbAdmin.from('tg_executors').upsert({
          tg_id: from.id,
          username: from.username ?? null,
          first_name: from.first_name ?? null,
          last_name: from.last_name ?? null,
          phone: exec?.phone ?? null,
        });

        const clientPhone = updated.client_phone ? `\n–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞: <b>${updated.client_phone}</b>` : '';
        await tgSend(
          from.id,
          `üÜï –ó–∞–∫–∞–∑ #${updated.id}\n${formatOrder(updated)}${clientPhone}`,
          kbDM(updated.id)
        );

        await tgAnswerCb(cbId, '–ó–∞–∫–∞–∑ –≤–∞—à!');
        return NextResponse.json({ ok: true });
      }

      if (action === 'release') {
        // –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –∑–∞–∫–∞–∑ (–Ω–∞–∂–∞—Ç–æ –∏–∑ –ª–∏—á–∫–∏)
        const { data: o } = await sbAdmin.from('orders').select('*').eq('id', orderId).single();
        if (o?.status === 'CLAIMED' && o?.claimed_by_tg_id === from.id) {
          const { data: released } = await sbAdmin
            .from('orders')
            .update({
              status: 'NEW',
              claimed_by_tg_id: null,
              claimed_by_tg_username: null,
              claimed_by: null,
            })
            .eq('id', orderId)
            .select('*')
            .single();

          if (released?.tg_channel_id && released?.tg_message_id) {
            await tgEditText(
              released.tg_channel_id,
              released.tg_message_id,
              formatOrder(released),
              { inline_keyboard: [[{ text: '‚úÖ –í–∑—è—Ç—å', callback_data: `accept:${orderId}` }]] }
            );
          }
          await tgAnswerCb(cbId, '–û—Å–≤–æ–±–æ–¥–∏–ª–∏');
        } else {
          await tgAnswerCb(cbId);
        }
        return NextResponse.json({ ok: true });
      }

      // noop
      await tgAnswerCb(cbId);
      return NextResponse.json({ ok: true });
    }

    return NextResponse.json({ ok: true });
  } catch (e) {
    console.error('TG webhook error', e);
    return NextResponse.json({ ok: false }, { status: 200 }); // Telegram –∂–¥—ë—Ç 200
  }
}
